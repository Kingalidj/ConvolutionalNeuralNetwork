class convNeuralNetwork {
  int[] numNodes;
  chanelMatrix[] layers, weights;
  float[] bias;

  convNeuralNetwork() {
  }
}

class chanelMatrix {
  int cols, rows, size = 5;
  matrix[][] chanel;

  chanelMatrix(int r, int c) {
    this.rows = r;
    this.cols = c;
    chanel = new matrix[rows][cols];

    for (int i = 0; i < this.rows; i++)
      for (int j = 0; j < this.cols; j++)
        chanel[i][j] = new matrix(5, 5);
  }

  void setSize(int s) {
    for (int i = 0; i < this.rows; i++)
      for (int j = 0; j < this.cols; j++){
        chanel[i][j] = new matrix(s, s);
      }
  }

  chanelMatrix mult(chanelMatrix m1) {
    int border = (int) floor(m1.chanel[0][0].cols / 2);
    if (this.cols == m1.rows) {
      chanelMatrix m2 = new chanelMatrix(this.rows, m1.cols);

      for (int i = 0; i < this.rows; i++) {
        for (int j = 0; j < m1.cols; j++) {

          matrix sum = new matrix(this.chanel[0][0].rows - 2 * border, this.chanel[0][0].rows - 2 * border);

          for (int k = 0; k < this.cols; k++) {
            sum.add(this.chanel[i][k].convolute(m1.chanel[k][j], 5));
            this.chanel[i][k].convolute(m1.chanel[k][j], 5).show();
          }
          m2.chanel[i][j] = sum.copy();
        }
      }

      return m2;
    } else {
      return null;
    }
  }

  void randomize() {
    for (int i = 0; i < this.rows; i++)
      for (int j = 0; j < this.cols; j++)
        this.chanel[i][j].randomize();
  }

  void show() {
    for (int i = 0; i < this.rows; i++)
      for (int j = 0; j < this.cols; j++)
        this.chanel[i][j].show();
  }
}
